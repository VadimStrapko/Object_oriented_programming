1.
Основных групп три — поведенческие, структурные и порождающие паттерны.

2.
Singleton
Применимость
 Когда в программе должен быть единственный экземпляр какого-то класса, доступный всем клиентам (например, общий доступ к базе данных из разных частей программы).
 Когда вам хочется иметь больше контроля над глобальными переменными.
 
3.
Thread
lock

4.
Factory
Применимость
 Когда заранее неизвестны типы и зависимости объектов, с которыми должен работать ваш код.
 Когда вы хотите дать возможность пользователям расширять части вашего фреймворка или библиотеки.
 Когда вы хотите экономить системные ресурсы, повторно используя уже созданные объекты, вместо порождения новых.
 
5.
Abstract Factory
Применимость
 Когда бизнес-логика программы должна работать с разными видами связанных друг с другом продуктов, не завися от конкретных классов продуктов.
 Когда в программе уже используется Фабричный метод, но очередные изменения предполагают введение новых типов продуктов.
 
6.
Prototype
Применимость
 Когда ваш код не должен зависеть от классов копируемых объектов.
 Когда вы имеете уйму подклассов, которые отличаются начальными значениями полей. Кто-то мог создать все эти классы, чтобы иметь возможность легко порождать объекты с определённой конфигурацией.
 
7.
Builder
Применимость
 Когда вы хотите избавиться от «телескопического конструктора».
  Когда ваш код должен создавать разные представления какого-то объекта. Например, деревянные и железобетонные дома.
  Когда вам нужно собирать сложные составные объекты, например, деревья Компоновщика.
  
8.
Паттерн проектирования Object pool (Объектный пул) на PHP
object pool) — порождающий паттерн (шаблон) проектирования, набор инициализированных и готовых киспользованию объектов. Когда системе требуется объект, он не создаётся, а берётся из пула. Когда объектбольше не нужен, он не уничтожается, а возвращается в пул.

9.
Основное назначение отложенной инициализации -отложить создание ресурсоемких объектов до того момента, когда это действительно необходимо.